
export const DependencyWaitTimeIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#FF914D" stroke="#0C1C3E" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
      <circle cx="12" cy="12" r="10" />
      <path d="M12 6v6l4 2" />
    </svg>
  );

  export const ManualStubCreationIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#FF914D" stroke="#0C1C3E" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
      <path d="M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34" />
      <polygon points="18 2 22 6 12 16 8 16 8 12 18 2" />
    </svg>
  );

  export const DataVariabilityConcernsIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#FF914D" stroke="#0C1C3E" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
      <path d="M18 4H6a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z" />
      <path d="M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" />
      <line x1="12" y1="8" x2="12" y2="16" />
      <line x1="8" y1="12" x2="16" y2="12" />
    </svg>
  );

  export const ErrorHandlingChallengesIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#FF914D" stroke="#0C1C3E" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
      <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
      <line x1="12" y1="9" x2="12" y2="13" />
      <line x1="12" y1="17" x2="12.01" y2="17" />
    </svg>
  );

  export const ScalabilityTestingDifficultiesIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#FF914D" stroke="#0C1C3E" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
      <path d="M3 6l3 6h12l3-6" />
      <path d="M3 18l3-6h12l3 6" />
      <line x1="12" y1="3" x2="12" y2="21" />
    </svg>
  );


export const featuresData = [
    {
      title: 'Coverage Analysis',
      icon:<DependencyWaitTimeIcon />,
      description: 'Keploy automates code coverage analysis, making it easier and faster.',
    },
    {
      title: 'Code Coverage Support',
      icon: <ManualStubCreationIcon />,
      description: "Keploy supports integration with python code coverage, and similarly with jest, junit, ensuring comprehensive testing of your applications.",
    },
    {
      title: 'Dynamic Test Generation',
      icon: <ScalabilityTestingDifficultiesIcon />,
      description: 'Keploy dynamically generates tests based on real user interactions, improving code coverage.',
    },
    {
      title: 'Comprehensive Reporting',
      icon: <DataVariabilityConcernsIcon />,
      description: 'Keploy provides detailed reports on complete code coverage including line, statement & branch, helping you identify areas for improvement.',
    },
    {
      title: 'Streamlined Workflow',
      icon: <ErrorHandlingChallengesIcon />,
      description: "With Keploy, you can streamline your testing workflow for better code coverage and software reliability.",
    }
  ];
  export const faqQuestions =[
    {
      title: "Does Keploy support Python code coverage analysis?",
      answer:
        "Yes, Keploy supports Python code coverage, ensuring comprehensive testing for Python applications.",
    },
    {
      title: "How can I combine my Keploy tests with frameworks like pyTest or Jest ?",
      answer:
        "You can merge tests generated by Keploy with your existing unit-test whether they are pyTest or Jest using language based SDK in your test file. Combining Keploy's test coverage with existing unit test coverage can increase the overall coverage in testing reports, helping in ensuring robust software delivery and enhancing overall product quality.",
    },
    {
      title: "How does Keploy contribute to overall software delivery?",
      answer:
        "By streamlining testing processes, providing developer-friendly solutions, and enhancing test coverage, Keploy accelerates software delivery, ensuring robust and high-quality products reach the market efficiently.",
    },
    {
      title: "How does Keploy contribute to improving unit test coverage?",
      answer:
        "By providing a zero code platform for automated testing, Keploy empowers developers to scale up their unit test coverage without extensive coding knowledge. This integration enhances testing reports, ultimately boosting confidence in the product's quality.",
    },
    {
      title: "What is Keploy's approach to unit test coverage?",
      answer:"Keploy offers a comprehensive solution to unit test coverage by seamlessly integrating with existing unit tests. It allows developers to merge Keploy-generated tests with their current unit tests, enhancing overall coverage and ensuring robust software delivery."
    },
    {
      title: "Can Keploy help streamline my testing workflow for better code coverage??",
      answer:"Absolutely, Keploy helps streamline your testing workflow, ensuring better code coverage and software reliability."
    }
  ]

  